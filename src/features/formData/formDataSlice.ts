import { createSlice, PayloadAction } from "@reduxjs/toolkit";

/**
 * Type definitions for help type option
 */
export enum HelpType {
  "generic" = "Chcem finančne prispieť celej nadácii",
  "specific" = "Chcem finančne prispieť konkrétnemu útulku",
}

/**
 * Standard donation amounts
 */
export const Amounts = [5, 10, 20, 30, 50, 100];

/**
 * Form data type definition
 */
export interface FormData {
  // --- step1
  option: HelpType;
  shelterList: { id: number; name: string }[];
  shelter?: number;
  amount: number;
  customAmount: boolean;

  // --- step2
  name: string;
  surname: string;
  email: string;
  phone: string;
  // error messages
  nameErrMsg: string;
  surnameErrMsg: string;
  emailErrMsg: string;
  phoneErrMsg: string;

  // --- step3
  /**
   * GDRP Agreement
   */
  gdpr: boolean;

  /**
   * Current step in the form process
   */
  step: number;

  /**
   * Donation status
   */
  success: boolean;
}

/**
 * Initial state values
 */
const initialState: FormData = {
  option: HelpType.specific,
  shelterList: [],
  shelter: undefined,

  amount: 20,
  customAmount: false,

  name: "",
  surname: "",
  email: "",
  phone: "",

  nameErrMsg: "",
  surnameErrMsg: "",
  emailErrMsg: "",
  phoneErrMsg: "",

  gdpr: false,

  step: 1,

  success: false,
};

/**
 * Contains definitions of reducers, in this case
 * setter to save data from the input form
 */
export const formDataSlice = createSlice({
  name: "formData",
  initialState,
  // Define setters (changing state)
  reducers: {
    setOption: (state, action: PayloadAction<HelpType>) => {
      state.option = action.payload;
    },
    setShelter: (state, action: PayloadAction<number>) => {
      state.shelter = action.payload;
    },
    saveShelterList(
      state,
      action: PayloadAction<{ id: number; name: string }[]>
    ) {
      state.shelterList = action.payload;
    },
    setAmount: (state, action: PayloadAction<[number, boolean]>) => {
      state.amount = action.payload[0] === 0 ? 1 : action.payload[0];
      state.customAmount = action.payload[1];
    },
    setName: (state, action: PayloadAction<string>) => {
      state.name = action.payload;

      let name: string = action.payload;
      state.nameErrMsg = "";

      // Validation
      if (name !== "" && name.trim().length < 2) {
        state.nameErrMsg = "Meno musí obsahovať aspoň 2 znaky.";
      }
      if (name !== "" && name.trim().length > 20) {
        state.nameErrMsg = "Meno nesmie obsahovať viac ako 20 znakov.";
      }
      if (!/^[a-zA-Z]+$/) {
        state.nameErrMsg = "Meno obsahuje neplatné znaky.";
      }
    },
    setSurname: (state, action: PayloadAction<string>) => {
      state.surname = action.payload;

      let surname: string = action.payload;
      state.surnameErrMsg = "";

      // Validation
      if (surname.trim().length < 2) {
        state.surnameErrMsg = "Priezvisko musí obsahovať aspoň 2 znaky.";
      }
      if (surname.trim().length > 30) {
        state.surnameErrMsg = "Priezvisko nesmie obsahovať viac ako 30 znakov.";
      }
      if (!/^[a-zA-Z]+$/) {
        state.surnameErrMsg = "Priezvisko obsahuje neplatné znaky.";
      }
    },
    setEmail: (state, action: PayloadAction<string>) => {
      state.email = action.payload;

      // Validation
      let email: string = action.payload;
      state.emailErrMsg = "";

      // https://www.regular-expressions.info/email.html
      if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(email)) {
        state.emailErrMsg = "Zadajte správny formát e-mailu.";
      }
    },
    setPhone: (state, action: PayloadAction<string>) => {
      state.phone = action.payload;

      // Validation
      let phone = action.payload;
      state.phoneErrMsg = "";

      // +421 132 088 998
      if (phone.length !== 13) {
        state.phoneErrMsg = "Neplatné telefónne číslo.";
      }
      if (!/^\+[0-9]+$/.test(phone)) {
        state.phoneErrMsg = "Tel. číslo obsahuje neplatné znaky";
      }
      if (phone.slice(0, 4) !== "+421" && phone.slice(0, 4) !== "+420") {
        state.phoneErrMsg = "Zvoľte prosím správnu predvoľbu.";
      }
    },
    setGdpr: (state, action: PayloadAction<boolean>) => {
      state.gdpr = action.payload;
    },

    nextStep: (state) => {
      state.step += 1;
    },
    prevStep: (state) => {
      if (state.step !== 1) state.step -= 1;
    },

    setStatus(state, action: PayloadAction<boolean>) {
      state.success = action.payload;
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const {
  setOption,
  setShelter,
  saveShelterList,
  setAmount,
  setName,
  setSurname,
  setEmail,
  setPhone,
  setGdpr,
  nextStep,
  prevStep,
  setStatus,
} = formDataSlice.actions;

export default formDataSlice.reducer;
